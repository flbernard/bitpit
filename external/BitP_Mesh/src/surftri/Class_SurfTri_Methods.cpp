// ========================================================================== //
//                         - Class_SurfTri -                                  //
//                                                                            //
// Grid manager for unstructured meshes.                                      //
// ========================================================================== //
// INFO                                                                       //
// ========================================================================== //
// Author   : Alessandro Alaia                                                //
// Version  : v3.0                                                            //
//                                                                            //
// All rights reserved.                                                       //
// ========================================================================== //

// ========================================================================== //
// INCLUDES                                                                   //
// ========================================================================== //
#include "Class_SurfTri.hpp"

// ========================================================================== //
// CLASS CONSTRUCTORS                                                         //
// ========================================================================== //

// -------------------------------------------------------------------------- //
Class_SurfTri::Class_SurfTri(
    int    dim
) {

// ========================================================================== //
// Class_SurfTri::Class_SurfTri(                                              //
//     void)                                                                  //
//                                                                            //
// Standard constructor for Class_SurfTri variables. Initialize an empty      //
// surface tasselation (Standard constructor)                                 //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// CONSTRUCTOR                                                                //
// ========================================================================== //

// # vertex
nVertex = 0;

// # edges
nEdge = 0;

// # simplicies
nSimplex = 0;

dimensions = dim ;

// tolerance for distance checks
toll = 1.0e-8;

return; };

// -------------------------------------------------------------------------- //
Class_SurfTri::Class_SurfTri(
    int nV,
    int nS,
    int dim
) {

// ========================================================================== //
// Class_SurfTri::Class_SurfTri(                                              //
//     int nV,                                                                //
//     int nS)                                                                //
//                                                                            //
// Custom constructor #1 for Class_SurfTri variables. Initialize an empty     //
// surface tasselation with nV vertexes and nS simplicies                     //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - nV   : int, number of vertexes                                           //
// - nS   : int, number of simplicies                                         //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// CONSTRUCTOR                                                                //
// ========================================================================== //

// # vertex
nVertex = nV;

// # edges
nEdge = 0;

// # simplicies
nSimplex = nS;

dimensions = dim ;

// tolerance for distance check
toll = 1.0e-8;

// Resize vertex list
ResizeVertex();

// Resize simplex-vertex connectivity
ResizeSimplex();

return; };

// ========================================================================== //
// CLASS DESTRUCTOR                                                           //
// ========================================================================== //

// -------------------------------------------------------------------------- //
Class_SurfTri::~Class_SurfTri(
    void
) {

// ========================================================================== //
// Class_SurfTri::~Class_SurfTri(                                             //
//     void)                                                                  //
//                                                                            //
// Standard destructor for Class_SurfTri variables                            //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY CONTENTS                                                           //
// ========================================================================== //

// Tasselation dimensions
nVertex = 0;
nSimplex = 0;
nEdge = 0;

// Destroy variables
DestroyVertex();
DestroyNormal();
DestroyENormal();
DestroyVNormal();
DestroySimplex();
DestroyAdjacency();

return; }

void Class_SurfTri::SetDimensions(
        int dim
        ){

    dimensions = dim;
    return;
};
// ========================================================================== //
// RESIZE OPERATORS                                                           //
// ========================================================================== //

// -------------------------------------------------------------------------- //
void Class_SurfTri::ResizeVertex(
) {

// ========================================================================== //
// void Class_SurfTri::ResizeVertex(                                          //
//     )                                                                      //
//                                                                            //
// Resize vertex list to nVertex rows. Each of the newly created rows will    //
// have d entries. During resize, data previously stored in Vertex will not   //
// be erased.                                                                 //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
darray3E    temp;
temp.fill(0.) ;

// ========================================================================== //
// RESIZE VERTEX LIST                                                         //
// ========================================================================== //
Vertex.resize(nVertex, temp);

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ResizeNormal(
) {

// ========================================================================== //
// void Class_SurfTri::ResizeNormal(     )                                    //
//                                                                            //
// Resize normals list to nSimplex rows. After resize, each of the new rows   //
// in Normal will have d entries. During resize, data previously stored in    //
// Normal are not erased                                                      //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// none
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
darray3E    temp;
temp.fill(0.) ;

// Counters
// none

// ========================================================================== //
// RESIZE NORMAL'S LIST                                                       //
// ========================================================================== //
Normal.resize(nSimplex, temp);

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ResizeENormal(
) {

// ========================================================================== //
// void Class_SurfTri::ResizeENormal(     )                                   //
//                                                                            //
// Resize edge normals list to nSimplex rows. After resize, each of the new   //
// rows in ENormal will have 3 entries. During resize, data previously stored //
// in ENormal are not erased                                                  //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// none
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
darray3E    temp;
temp.fill(0.) ;

// Counters
// none

// ========================================================================== //
// RESIZE NORMAL'S LIST                                                       //
// ========================================================================== //
ENormal.resize(nSimplex, temp);

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ResizeVNormal(
) {

// ========================================================================== //
// void Class_SurfTri::ResizeVNormal(     )                                   //
//                                                                            //
// Resize vertex normals list to nVertex rows. After resize, each of the new  //
// rows in VNormal will have 3 entries. During resize, data previously stored //
// in VNormal are not erased                                                  //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// none
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
darray3E    temp;
temp.fill(0.) ;

// Counters
// none

// ========================================================================== //
// RESIZE NORMAL'S LIST                                                       //
// ========================================================================== //
VNormal.resize(nVertex, temp);

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ResizeSimplex(
    void
) {

// ========================================================================== //
// void Class_SurfTri::ResizeSimplex(                                         //
//     int d)                                                                 //
//                                                                            //
// Resize simplex-vertex connectivity matrix to nSimplex rows. During resize, //
// data previously stored in Simplex are not destroyed.                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// RESIZE SIMPLEX-VERTEX CONNECTIVITY MATRIX                                  //
// ========================================================================== //
Simplex.resize(nSimplex);

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ResizeSimplex(
    int d
) {

// ========================================================================== //
// void Class_SurfTri::ResizeSimplex(                                         //
//     int d)                                                                 //
//                                                                            //
// Resize simplex-vertex connectivity matrix to nSimplex rows. Each of the    //
// newly created row, will have d entries. During resize data previously      //
// stored in Simplex are not destroyed.                                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - d     : int, number of edges for each simplex                            //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// RESIZE SIMPLEX-VERTEX CONNECTIVITY MATRIX                                  //
// ========================================================================== //
Simplex.resize(nSimplex, ivector1D(d, -1));

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ResizeEdge(
    int d
) {

// ========================================================================== //
// void Class_SurfTri::ResizeEdge(                                            //
//     int d)                                                                 //
//                                                                            //
// Resize edge-vertex connectivity to nEdges rows. Each of the                //
// newly created row, will have a number entries equal to d.                  //
// The value of d should be chose according to the following rule.            //
// vertices delimiting the edge. That is:                                     //
// - for surface tasselation made up of 2D simplicies (e.g. triangles,        //
//   quadrilaterals, etc.), the i-th entry in the edge-vertex connctivity     //
//   should have 2 entries (d=2) corresponding to the  global indices of      //
//   vertices delimiting the i-th edge.                                       //
// - for tasselation made up of 1D simplicies (segments) the i-th entry in    //
//   Edge should only have 1 entry (d=1) (as the edge of a segments is a      //
//   point).                                                                  //
// During resize data previously stored in Simplex are not destroyed.         //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - d      : int (default = 2), number of entries for the new rows in        //
//            edge-vertex connectivity                                        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// RESIZE SIMPLEX-VERTEX CONNECTIVITY MATRIX                                  //
// ========================================================================== //
Edge.resize(CountEdges(), ivector1D(d, -1));

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ResizeSimplex2Edge(
    int d
) {

// ========================================================================== //
// void Class_SurfTri::ResizeSimplex2Edge(                                    //
//     int d)                                                                 //
//                                                                            //
// Resize simplex-edge connectivity matrix to nSimplex rows. Each of the      //
// newly created row, will have d entries. During resize data previously      //
// stored in Simplex are not destroyed.                                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - d     : int (default = 3), number of edges for each simplex              //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// RESIZE SIMPLEX-VERTEX CONNECTIVITY MATRIX                                  //
// ========================================================================== //
Simplex2Edge.resize(nSimplex, ivector1D(d, -1));

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ResizeAdjacency(
    void
) {

// ========================================================================== //
// void Class_SurfTri::ResizeAdjacency(                                       //
//     int d)                                                                 //
//                                                                            //
// Resize simplex-simplex adjacency matrix to nSimplex rows. During resize,   //
// data previously stored in Adjacency are not erased.                        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// RESIZE SIMPLEX-SIMPLEX CONNECTIVITY MATRIX                                 //
// ========================================================================== //
Adjacency.resize(nSimplex);

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ResizeAdjacency(
    int d
) {

// ========================================================================== //
// void Class_SurfTri::ResizeAdjacency(                                       //
//     int d)                                                                 //
//                                                                            //
// Resize simplex-simplex adjacency matrix to nSimplex rows. After resize,    //
// each of the new rows will have d entries. During resize, data previously   //
// stored in Adjacency are not erased.                                        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - d     : int, number of edges for each simplex                            //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// RESIZE SIMPLEX-SIMPLEX CONNECTIVITY MATRIX                                 //
// ========================================================================== //
Adjacency.resize(nSimplex, ivector2D(d, ivector1D(1, -1)));

return; };

// ========================================================================== //
// RESHAPE OPERATORS                                                          //
// ========================================================================== //

// -------------------------------------------------------------------------- //
void Class_SurfTri::ReshapeSimplex(
    int d
) {

// ========================================================================== //
// void Class_SurfTri::ReshapeSimplex(                                        //
//     int d)                                                                 //
//                                                                            //
// Reshape simplex-vertex connectivity matrix to nSimplex rows. After reshape //
// each row in Simplex will have d entries. During reshape, data previously   //
// stored in Simplex are not erased.                                          //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - d    : int, number of vertex for each simplex                            //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int       old_size = Simplex.size();

// Counters
int       i;

// ========================================================================== //
// RESIZE SIMPLEX-VERTEX CONNECTIVITY MATRIX                                  //
// ========================================================================== //

// Resize Simplex
ResizeSimplex(d);

// Reshape Simplex
old_size = min(old_size, nSimplex);
for (i = 0; i < old_size; i++) {
    Simplex[i].resize(d, -1);
} //next i

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ReshapeSimplex2Edge(
    void
) {

// ========================================================================== //
// void Class_SurfTri::ReshapeSimplex2Edge(                                   //
//     void)                                                                  //
//                                                                            //
// Reshape simplex-edge connectivity matrix to nSimplex rows. After reshape   //
// each row in Simplex will have a number of entries equal to the number of   //
// edges for the corresponding simplex. During reshape, data previously       //
// stored in Simplex are not erased.                                          //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - d    : int, number of vertex for each simplex                            //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int       i;

// ========================================================================== //
// RESIZE SIMPLEX-VERTEX CONNECTIVITY MATRIX                                  //
// ========================================================================== //

// Resize Simplex
ResizeSimplex2Edge();

// Reshape Simplex
for (i = 0; i < nSimplex; i++) {
    Simplex2Edge[i].resize(Simplex[i].size(), -1);
} //next i

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ReshapeAdjacency(
    void
) {

// ========================================================================== //
// void Class_SurfTri::ReshapeAdjacency(                                      //
//     int d)                                                                 //
//                                                                            //
// Reshape simplex-simplex adjacency matrix to nSimplex rows. After reshape   //
// each row in Adjacency will have a number of entries equal to the number of //
// edges of the corresponding simplex. During reshape, data previously stored //
// are not erased.                                                            //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int   i;

// ========================================================================== //
// RESIZE SIMPLEX-SIMPLEX CONNECTIVITY MATRIX                                 //
// ========================================================================== //

// Resize Adjacency
ResizeAdjacency();

// Reshape Adjacency
for (i = 0; i < nSimplex; i++) {
    Adjacency[i].resize(Simplex[i].size(), ivector1D(1, -1));
} //next i

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ReshapeAdjacency(
    int d
) {

// ========================================================================== //
// void Class_SurfTri::ReshapeAdjacency(                                      //
//     int d)                                                                 //
//                                                                            //
// Reshape simplex-simplex adjacency matrix to nSimplex rows. After reshape,  //
// each row in Adjacency will have d entries. During reshape, data previously //
// stored in Adjacency are not erased.                                        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - d         : int, number of edges for each simplex                        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int   i;

// ========================================================================== //
// RESIZE SIMPLEX-SIMPLEX CONNECTIVITY MATRIX                                 //
// ========================================================================== //

// Resize Adjacency
Adjacency.resize(nSimplex);

// Reshape Adjacency
for (i = 0; i < nSimplex; i++) {
    Adjacency[i].resize(d, ivector1D(1, -1));
} //next i

return; };

// ========================================================================== //
// DESTRUCTORS                                                                //
// ========================================================================== //

// -------------------------------------------------------------------------- //
void Class_SurfTri::DestroyVertex(
    void
) {

// ========================================================================== //
// void Class_SurfTri::DestroyVertex(                                         //
//     void)
//                                                                            //
// Destroy vertex list. All data stored in Vertex are lost.                   //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY VERTEX                                                             //
// ========================================================================== //
nVertex = 0;
ResizeVertex();

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ClearVertex(
    void
) {

// ========================================================================== //
// void Class_SurfTri::ClearVertex(                                           //
//     void)                                                                  //
//                                                                            //
// Clear contents in vertex coordinate list, without altering its shape.      //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int i, j;

// ========================================================================== //
// CLEAR CONTENTS IN VERTEX                                                   //
// ========================================================================== //
for (i = 0; i < Vertex.size(); i++) {
    for (j = 0; j < Vertex[i].size(); j++) {
        Vertex[i][j] = 0.0;
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::DestroyNormal(
    void
) {

// ========================================================================== //
// void Class_SurfTri::DestroyNormal(                                         //
//     void)                                                                  //
//                                                                            //
// Destroy Normals list. All data stored in Normal are lost.                  //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY NORMALS                                                            //
// ========================================================================== //
Normal.resize(0);

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::DestroyENormal(
    void
) {

// ========================================================================== //
// void Class_SurfTri::DestroyENormal(                                        //
//     void)                                                                  //
//                                                                            //
// Destroyedge  Normals list. All data stored in ENormal are lost.            //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY NORMALS                                                            //
// ========================================================================== //
ENormal.resize(0);

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::DestroyVNormal(
    void
) {

// ========================================================================== //
// void Class_SurfTri::DestroyVNormal(                                        //
//     void)                                                                  //
//                                                                            //
// Destroy vertex Normals list. All data stored in VNormal are lost.          //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY NORMALS                                                            //
// ========================================================================== //
VNormal.resize(0);

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ClearNormal(
    void
) {

// ========================================================================== //
// void Class_SurfTri::ClearNormal(                                           //
//     void)                                                                  //
//                                                                            //
// Clear contents in normal list, without altering its shape.                 //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int             i;

// ========================================================================== //
// CLEAR CONTENTS IN VERTEX                                                   //
// ========================================================================== //
for (i = 0; i < Normal.size(); i++) {
    Normal[i].fill(0.0);
} //next i

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ClearENormal(
    void
) {

// ========================================================================== //
// void Class_SurfTri::ClearENormal(                                          //
//     void)                                                                  //
//                                                                            //
// Clear contents in edge normal list, without altering its shape.            //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int     i;

// ========================================================================== //
// CLEAR CONTENTS IN VERTEX                                                   //
// ========================================================================== //
for (i = 0; i < ENormal.size(); i++) {
    ENormal[i].fill(0.0);
} //next i

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ClearVNormal(
    void
) {

// ========================================================================== //
// void Class_SurfTri::ClearVNormal(                                           //
//     void)                                                                  //
//                                                                            //
// Clear contents in normal list, without altering its shape.                 //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int     i;

// ========================================================================== //
// CLEAR CONTENTS IN VERTEX                                                   //
// ========================================================================== //
for (i = 0; i < VNormal.size(); i++) {
    VNormal[i].fill(0.0);
} //next i

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::DestroySimplex(
    void
) {

// ========================================================================== //
// void Class_SurfTri::DestroySimplex(                                        //
//     void)                                                                  //
//                                                                            //
// Destroy Simplex list. All data stored in Simplex are lost.                 //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY SIMPLEX-VERTEX CONNECTIVITY                                        //
// ========================================================================== //
nSimplex = 0;
ResizeSimplex();

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::DestroyEdge(
    void
) {

// ========================================================================== //
// void Class_SurfTri::DestroyEdge(                                           //
//     void)                                                                  //
//                                                                            //
// Destroy edge-vertex connectivity. All data stored in Edge are lost.        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY SIMPLEX-VERTEX CONNECTIVITY                                        //
// ========================================================================== //
Edge.resize(0);

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::DestroySimplex2Edge(
    void
) {

// ========================================================================== //
// void Class_SurfTri::DestroySimplex2Edge(                                   //
//     void)                                                                  //
//                                                                            //
// Destroy Simplex-edge connectivity. All data stored in Simplex2Edge are     //
// lost.                                                                      //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY SIMPLEX-VERTEX CONNECTIVITY                                        //
// ========================================================================== //
Simplex2Edge.resize(0);

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ClearSimplex(
    void
) {

// ========================================================================== //
// void Class_SurfTri::ClearSimplex(                                          //
//     void)                                                                  //
//                                                                            //
// Clear contents in Simplex, without altering its shape.                     //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int i, j;

// ========================================================================== //
// CLEAR CONTENTS IN VERTEX                                                   //
// ========================================================================== //
for (i = 0; i < Simplex.size(); i++) {
    for (j = 0; j < Simplex[i].size(); j++) {
        Simplex[i][j] = -1;
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ClearEdge(
    void
) {

// ========================================================================== //
// void Class_SurfTri::ClearEdge(                                             //
//     void)                                                                  //
//                                                                            //
// Clear contents in Edge, without altering its shape.                        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int i, j;

// ========================================================================== //
// CLEAR CONTENTS IN VERTEX                                                   //
// ========================================================================== //
for (i = 0; i < Edge.size(); i++) {
    for (j = 0; j < Edge[i].size(); j++) {
        Edge[i][j] = -1;
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ClearSimplex2Edge(
    void
) {

// ========================================================================== //
// void Class_SurfTri::ClearSimplex2Edge(                                     //
//     void)                                                                  //
//                                                                            //
// Clear contents in Simplex2Edge, without altering its shape.                //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int i, j;

// ========================================================================== //
// CLEAR CONTENTS IN VERTEX                                                   //
// ========================================================================== //
for (i = 0; i < Simplex2Edge.size(); i++) {
    for (j = 0; j < Simplex2Edge[i].size(); j++) {
        Simplex2Edge[i][j] = -1;
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::DestroyAdjacency(
    void
) {

// ========================================================================== //
// void Class_SurfTri::DestroyAdjacency(                                      //
//     void)                                                                  //
//                                                                            //
// Destroy Adjacency. All data stored in Adjacency are lost.                  //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY ADJACENCIES                                                        //
// ========================================================================== //
Adjacency.resize(0);

return; };

// -------------------------------------------------------------------------- //
void Class_SurfTri::ClearAdjacency() {

// ========================================================================== //
// void Class_SurfTri::ClearAdjacency()                                       //
//                                                                            //
// Clear contents in adjacency matrix, without altering shape.                //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int i, j, k;

// ========================================================================== //
// CLEAR CONTENTS IN VERTEX                                                   //
// ========================================================================== //
for (i = 0; i < Adjacency.size(); i++) {
    for (j = 0; j < Adjacency[i].size(); j++) {
        Adjacency[i][j].resize(1);
        Adjacency[i][j][0] = -1;
    } //next j
} //next i

return; };

// ========================================================================== //
// ASSIGNAMENT                                                                //
// ========================================================================== //

// -------------------------------------------------------------------------- //
Class_SurfTri& Class_SurfTri::operator=(
    const Class_SurfTri &B
) {

// ========================================================================== //
// Class_SurfTri& Class_SurfTri::operator=(                                   //
//     const Class_SurfTri &B)                                                //
//                                                                            //
// Assignament operator for Class_SurfTri variables. Copy surface tasselation //
// B into *this. All data previously stored in *this are overwritten.         //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - B   : Class_SurfTri, source surface tasselation                          //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
bool     flag_n, flag_a, flag_en, flag_vn, flag_ec, flag_sec;

// Counters
int      i, j, m;

// ========================================================================== //
// CHECK AVAILABLE DATA STRUCTURES                                            //
// ========================================================================== //
if (B.Vertex.size() < B.nVertex) {
    return(*this);
}
if (B.Simplex.size() < B.nSimplex) {
    return(*this);
}
flag_ec  = (B.Edge.size() > 0);
flag_sec = ((B.Simplex2Edge.size() > 0) && (B.Simplex2Edge.size() >= B.nSimplex));
flag_n   = ((B.Normal.size() > 0) && (B.Normal.size() >= B.nSimplex));
flag_en  = ((B.ENormal.size() > 0) && (B.ENormal.size() >= 0));
flag_vn  = ((B.VNormal.size() > 0) && (B.VNormal.size() >= B.nVertex));
flag_a   = ((B.Adjacency.size() > 0) && (B.Adjacency.size() >= B.nSimplex));

// ========================================================================== //
// COPY SOURCE VARIABLES INTO *THIS                                           //
// ========================================================================== //

// Tasselation dimensions
nVertex = B.nVertex;
nSimplex = B.nSimplex;

// Copy vertex coordinate list
ResizeVertex();
for (i = 0; i < nVertex; i++) {
    Vertex[i] = B.Vertex[i];
} //next i

// Copy vertex-simplex connectivity matrix
ResizeSimplex();
for (i = 0; i < nSimplex; i++) {
    Simplex[i] = B.Simplex[i];
} //next i

// Copy edge-vertex connectivity
if (flag_ec) {
    Edge = B.Edge;
}

// Copy simplex-edge connectivity
if (flag_sec) {
    Simplex2Edge = B.Simplex2Edge;
}

// Copy normals
if (flag_n) {
    Normal = B.Normal;
}

// Copy edge normals
if (flag_en) {
    ENormal = B.ENormal;
}

// Copy vertex normals
if (flag_vn) {
    VNormal = B.VNormal;
}

// Copy adjacency matrix
if (flag_a) {
    ResizeAdjacency();
    for (i = 0; i < nSimplex; i++) {
        Adjacency[i] = B.Adjacency[i];
    } //next i
}

return(*this); };


